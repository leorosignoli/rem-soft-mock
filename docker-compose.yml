version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: order-management-db
    environment:
      POSTGRES_DB: order_management_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - order-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: order-management-cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - order-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./OrderManagementService
      dockerfile: Dockerfile
    container_name: order-management-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/order_management_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - order-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./OrderManagementFrontEnd
      dockerfile: Dockerfile
    container_name: order-management-frontend
    environment:
      API_BASE_URL: http://backend:8080
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - order-management-network

volumes:
  postgres_data:
  redis_data:

networks:
  order-management-network:
    driver: bridge